name: Python CI

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - 'Makefile'
      - '.github/workflows/python.yml'
      - 'test_plan*.json'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Test (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install deps
        shell: bash
        run: |
          python -m pip install -U pip
          if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
          pip install black isort ruff mypy pytest build wheel
          # If you have packaging metadata, install editable; else set PYTHONPATH
          if [[ -f pyproject.toml || -f setup.py || -f setup.cfg ]]; then
            pip install -e .
          else
            # <-- KEY FIX: add the inner package path so `import plancosts` works
            echo "PYTHONPATH=$GITHUB_WORKSPACE/plancosts:$GITHUB_WORKSPACE:$PYTHONPATH" >> $GITHUB_ENV
          fi
          if grep -qE '^[[:space:]]*deps:' Makefile 2>/dev/null; then make deps || true; fi


      - name: Static checks (format + lint + typecheck)
        shell: bash
        run: |
          # Prefer Makefile if present
          if [[ -f Makefile ]]; then
            # Your Makefile's fmt target *formats* (not --check), so it won't fail CI
            make fmt
            make lint || true
            make typecheck || true
          else
            # No Makefile: format in-place (avoid failing on --check)
            black .
            isort .
            ruff check . || true
            mypy plancosts || true
          fi

      - name: Unit tests
        shell: bash
        run: |
          if [[ -f Makefile ]]; then
            make test
          else
            pytest -q
          fi

      - name: Mock self-tests (regex/tenancy/fixtures)
        env:
          SELF_TEST: "1"
        run: |
          python mock_pricing_api.py

      - name: CLI smoke with fixtures (table)
        env:
          PLANCOSTS_API_URL: http://127.0.0.1:4000
        shell: bash
        run: |
          # Start mock server in background
          python mock_pricing_api.py &
          MOCK_PID=$!
          sleep 1
          # Run any available fixture smokes
          [[ -f "test_plan_ern.json" ]] && python main.py --tfjson test_plan_ern.json -o table || true
          [[ -f "test_plan_rds.json" ]] && python main.py --tfjson test_plan_rds.json -o table || true
          [[ -f "test_plan.json"     ]] && python main.py --tfjson test_plan.json     -o table || true
          # Stop mock server
          kill $MOCK_PID || true
