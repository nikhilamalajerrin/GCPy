name: Python CI

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'Makefile'
      - '.github/workflows/python.yml'
      - 'test_plan*.json'
      - 'plancosts/**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Test (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install deps
        shell: bash
        run: |
          python -m pip install -U pip
          if [[ -f pyproject.toml ]]; then
            echo "Installing package from pyproject.toml"
            pip install -e ".[dev]" || pip install -e .
          elif [[ -f requirements.txt ]]; then
            echo "Installing from requirements.txt"
            pip install -r requirements.txt
          else
            echo "No dependency file found, installing basic dependencies"
            pip install requests boto3
          fi
          pip install black isort ruff mypy pytest build wheel
          echo "PYTHONPATH=$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/plancosts" >> $GITHUB_ENV
          if grep -qE '^[[:space:]]*deps:' Makefile 2>/dev/null; then
            make deps || true
          fi

      - name: Static checks (format + lint + typecheck)
        shell: bash
        run: |
          if [[ -f Makefile ]]; then
            make fmt || true
            make lint || true
            make typecheck || true
          else
            black . || true
            isort . || true
            ruff check . || true
            mypy plancosts || true
          fi

      - name: Unit tests
        shell: bash
        run: |
          if [[ -f Makefile ]]; then
            make test || true
          else
            pytest -q || true
          fi

      - name: Start mock pricing API
        shell: bash
        run: |
          echo "Starting mock pricing API..."
          python -m plancosts.tests.mock_price &
          echo $! > mock_pid.txt

      - name: Wait for mock API readiness (POST /graphql)
        shell: bash
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "http://127.0.0.1:4000/graphql")
            if [[ "$code" == "200" ]]; then
              echo "Mock API ready"
              exit 0
            fi
            sleep 0.5
          done
          echo "Mock API failed readiness" >&2
          exit 1

      - name: CLI smoke tests with fixtures (table)
        env:
          PLANCOSTS_API_URL: http://127.0.0.1:4000
        shell: bash
        run: |
          if [[ -f "main.py" ]]; then
            MAIN_SCRIPT="main.py"
          elif [[ -f "plancosts/main.py" ]]; then
            MAIN_SCRIPT="plancosts/main.py"
          else
            echo "Warning: main.py not found in expected locations"; exit 0
          fi
          echo "Using main script: $MAIN_SCRIPT"
          ran_any=0
          for test_file in test_plan_ern.json test_plan_rds.json test_plan.json; do
            if [[ -f "$test_file" ]]; then
              python "$MAIN_SCRIPT" --tfjson "$test_file" -o table || true
              ran_any=1
            elif [[ -f "plancosts/$test_file" ]]; then
              python "$MAIN_SCRIPT" --tfjson "plancosts/$test_file" -o table || true
              ran_any=1
            fi
          done
          if [[ "$ran_any" -eq 0 ]]; then
            echo "No test_plan*.json found; skipping CLI smoke tests."
          fi

      - name: Stop mock pricing API
        if: always()
        shell: bash
        run: |
          if [[ -f mock_pid.txt ]]; then
            kill "$(cat mock_pid.txt)" || true
          fi
